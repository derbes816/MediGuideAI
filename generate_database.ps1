[CmdletBinding()]
param(
    [string]$SqlitePath      = "C:\sqlite\sqlite3.exe",
    [string]$CsvSourcePath   = (Join-Path $PSScriptRoot "data\csv"),
    [string]$DbOutputPath    = (Join-Path $PSScriptRoot "data\db"),
    [string]$AssetsPath      = (Join-Path $PSScriptRoot "app\src\main\assets\database")
)

function Invoke-Sqlite {
    param(
        [string]$DbFile,
        [Parameter(ValueFromPipeline)]$Query
    )
    process {
        $output = $Query | & $SqlitePath $DbFile
        if ($LASTEXITCODE -ne 0) {
            throw "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQLite –≤ —Ñ–∞–π–ª–µ '$DbFile'. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: $LASTEXITCODE. –í—ã–≤–æ–¥: $output"
        }
        return $output
    }
}

Write-Host "--- üöÄ –ù–∞—á–∞–ª–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ ---"
if (-not (Test-Path $SqlitePath)) { throw "–ù–µ –Ω–∞–π–¥–µ–Ω sqlite3.exe: $SqlitePath" }
if (-not (Test-Path $CsvSourcePath)) { throw "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ —Å CSV: $CsvSourcePath" }

if (-not (Test-Path $DbOutputPath)) { New-Item -ItemType Directory -Path $DbOutputPath | Out-Null; Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: $DbOutputPath" -ForegroundColor Green }
if (-not (Test-Path $AssetsPath))   { New-Item -ItemType Directory -Path $AssetsPath -Force | Out-Null; Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: $AssetsPath" -ForegroundColor Green }

Remove-Item "$AssetsPath\*.db" -ErrorAction SilentlyContinue
Write-Host "üßπ –ü–∞–ø–∫–∞ assets –æ—á–∏—â–µ–Ω–∞ –æ—Ç —Å—Ç–∞—Ä—ã—Ö .db —Ñ–∞–π–ª–æ–≤."

$totalStart = Get-Date
$csvFiles = Get-ChildItem -Path $CsvSourcePath -Filter "raw_faq_*.csv" -File

if ($csvFiles.Count -eq 0) {
    Write-Warning "–í –ø–∞–ø–∫–µ '$CsvSourcePath' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞ –ø–æ —à–∞–±–ª–æ–Ω—É 'raw_faq_*.csv'."
    return
}

Write-Host "üìÇ –ù–∞–π–¥–µ–Ω–æ CSV –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: $($csvFiles.Count). –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
Write-Host "---"

$results = $csvFiles | ForEach-Object -Parallel {
    $file = $_
    $threadId = $PID
    $resultObject = [PSCustomObject]@{
        FileName     = $file.Name
        DatabaseName = ''
        Status       = '–û—à–∏–±–∫–∞'
        RecordCount  = 0
        SizeMB       = 0
        DurationSec  = 0
        ErrorMessage = ''
    }
    
    $fileStart = Get-Date

    try {
        if ((Get-Content $file.FullName -TotalCount 2).Count -le 1) {
            $resultObject.Status = '–ü—Ä–æ–ø—É—â–µ–Ω (–ø—É—Å—Ç–æ–π)'
            $resultObject.ErrorMessage = '–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫.'
            return $resultObject
        }

        $lang   = $file.BaseName -replace '^raw_faq_', ''
        $dbName = "faq_${lang}.db"
        $dbFile = Join-Path $using:DbOutputPath $dbName
        $resultObject.DatabaseName = $dbName

        Write-Host "[–ü–æ—Ç–æ–∫ $threadId] üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: $($file.Name) ‚Üí $dbName"

        if (Test-Path $dbFile) { Remove-Item $dbFile -Force }

        @"
CREATE TABLE FaqEntity (
    id INTEGER NOT NULL PRIMARY KEY,
    question TEXT NOT NULL,
    answer TEXT NOT NULL,
    category TEXT,
    tags TEXT
);
CREATE VIRTUAL TABLE FaqFts USING fts5(
    question,
    answer,
    tags,
    content='FaqEntity',
    content_rowid='id',
    tokenize='porter unicode61'
);
"@ | Invoke-Sqlite -DbFile $dbFile -using:SqlitePath

        $safeCsvPath = $file.FullName.Replace("'", "''")
        ".mode csv`n.separator ,`n.import --skip 1 '$safeCsvPath' FaqEntity" | Invoke-Sqlite -DbFile $dbFile -using:SqlitePath

        "INSERT INTO FaqFts(FaqFts) VALUES('rebuild');" | Invoke-Sqlite -DbFile $dbFile -using:SqlitePath
        
        "VACUUM;" | Invoke-Sqlite -DbFile $dbFile -using:SqlitePath

        $destinationPath = Join-Path $using:AssetsPath $dbName
        Copy-Item $dbFile -Destination $destinationPath -Force
        
        $recordCount = ("SELECT COUNT(*) FROM FaqEntity;" | Invoke-Sqlite -DbFile $dbFile -using:SqlitePath).Trim()
        $sizeMB = [math]::Round((Get-Item $dbFile).Length / 1MB, 2)

        $resultObject.Status = '‚úÖ –£—Å–ø–µ—à–Ω–æ'
        $resultObject.RecordCount = [int]$recordCount
        $resultObject.SizeMB = $sizeMB
    }
    catch {
        $resultObject.ErrorMessage = $_.ToString()
    }
    finally {
        $resultObject.DurationSec = [math]::Round(((Get-Date) - $fileStart).TotalSeconds, 2)
    }

    return $resultObject

} -ThrottleLimit ([System.Environment]::ProcessorCount)


$totalElapsed = (Get-Date) - $totalStart
Write-Output "`n--- ‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ---"
Write-Output "‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $([math]::Round($totalElapsed.TotalSeconds, 2)) —Å–µ–∫."

$success = $results | Where-Object { $_.Status -eq '‚úÖ –£—Å–ø–µ—à–Ω–æ' }
$skipped = $results | Where-Object { $_.Status -like '–ü—Ä–æ–ø—É—â–µ–Ω*' }
$errors  = $results | Where-Object { $_.Status -eq '–û—à–∏–±–∫–∞' }

if ($success) {
    Write-Host "`n--- –û—Ç—á—ë—Ç –æ–± —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–∞–∑–∞—Ö ---" -ForegroundColor Green
    $success | Format-Table FileName, DatabaseName, RecordCount, SizeMB, DurationSec -AutoSize
}

if ($skipped) {
    Write-Host "`n--- –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ---" -ForegroundColor Yellow
    $skipped | Format-Table FileName, Status, ErrorMessage -AutoSize -Wrap
}

if ($errors) {
    Write-Host "`n--- ‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò ---" -ForegroundColor Red
    foreach ($err in $errors) {
        Write-Host "–§–∞–π–ª: $($err.FileName)" -ForegroundColor Red
        Write-Host "–û—à–∏–±–∫–∞: $($err.ErrorMessage)" -ForegroundColor Red
        Write-Host "---"
    }
}
